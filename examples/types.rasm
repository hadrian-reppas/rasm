let COUNT: i64 = 1;
let HASH_MAP: hash_map[string, vec[i64]] = null;

fn map(data: vec[A], f: fn(A) -> B) -> vec[B] {}

fn filter_map(data: vec[A], f: fn(A) -> option[B]) -> vec[B] {}

fn increment(p: *i64) {
	*p += 1;
}

fn loop(start: i64, end) {
	for (let i: i64 = start; i < end; i += 1) {
		let x: i64 = i + end;
		let y = x - i;
	}
}

fn main(argc: i64, argv: **u8) -> int {
	let x = 0;
	let y = &x;
	*y += 1;
	x
}
